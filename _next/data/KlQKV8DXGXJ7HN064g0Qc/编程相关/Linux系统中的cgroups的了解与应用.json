{"pageProps":{"source":"{\"compiledSource\":\"/*@jsxRuntime automatic @jsxImportSource react*/\\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\\nconst {useMDXComponents: _provideComponents} = arguments[0];\\nfunction _createMdxContent(props) {\\n  const _components = Object.assign({\\n    p: \\\"p\\\",\\n    ol: \\\"ol\\\",\\n    li: \\\"li\\\",\\n    strong: \\\"strong\\\",\\n    code: \\\"code\\\",\\n    pre: \\\"pre\\\",\\n    span: \\\"span\\\"\\n  }, _provideComponents(), props.components);\\n  return _jsxs(_Fragment, {\\n    children: [_jsx(_components.p, {\\n      children: \\\"Linux 的 cgroup（控制组）特性是一种强大的工具，它允许你限制、记录和隔离进程组所使用的物理资源（包括 CPU、内存、磁盘 I/O 等）。如果你想限制一个进程或一组进程的最大内存使用量，你可以使用 cgroup 的内存限制功能。\\\"\\n    }), \\\"\\\\n\\\", _jsx(_components.p, {\\n      children: \\\"以下是如何使用 cgroup 来限制最大内存使用的基本步骤：\\\"\\n    }), \\\"\\\\n\\\", _jsxs(_components.ol, {\\n      children: [\\\"\\\\n\\\", _jsxs(_components.li, {\\n        children: [\\\"\\\\n\\\", _jsxs(_components.p, {\\n          children: [_jsx(_components.strong, {\\n            children: \\\"创建 cgroup\\\"\\n          }), \\\":\\\\n使用 \\\", _jsx(_components.code, {\\n            children: \\\"cgcreate\\\"\\n          }), \\\" 命令创建一个新的 cgroup。例如，创建一个名为 \\\", _jsx(_components.code, {\\n            children: \\\"mygroup\\\"\\n          }), \\\" 的 cgroup，可以使用以下命令：\\\"]\\n        }), \\\"\\\\n\\\", _jsx(_components.pre, {\\n          className: \\\"language-bash\\\",\\n          children: _jsx(_components.code, {\\n            className: \\\"language-bash code-highlight\\\",\\n            children: _jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [_jsx(_components.span, {\\n                className: \\\"token function\\\",\\n                children: \\\"sudo\\\"\\n              }), \\\" cgcreate \\\", _jsx(_components.span, {\\n                className: \\\"token parameter variable\\\",\\n                children: \\\"-g\\\"\\n              }), \\\" memory:/mygroup\\\\n\\\"]\\n            })\\n          })\\n        }), \\\"\\\\n\\\"]\\n      }), \\\"\\\\n\\\", _jsxs(_components.li, {\\n        children: [\\\"\\\\n\\\", _jsxs(_components.p, {\\n          children: [_jsx(_components.strong, {\\n            children: \\\"设置内存限制\\\"\\n          }), \\\":\\\\n使用 \\\", _jsx(_components.code, {\\n            children: \\\"cgset\\\"\\n          }), \\\" 命令为 cgroup 设置内存限制。例如，将 \\\", _jsx(_components.code, {\\n            children: \\\"mygroup\\\"\\n          }), \\\" 的内存限制设置为 200MB，可以使用以下命令：\\\"]\\n        }), \\\"\\\\n\\\", _jsx(_components.pre, {\\n          className: \\\"language-bash\\\",\\n          children: _jsx(_components.code, {\\n            className: \\\"language-bash code-highlight\\\",\\n            children: _jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [_jsx(_components.span, {\\n                className: \\\"token function\\\",\\n                children: \\\"sudo\\\"\\n              }), \\\" cgset \\\", _jsx(_components.span, {\\n                className: \\\"token parameter variable\\\",\\n                children: \\\"-r\\\"\\n              }), \\\" \\\", _jsx(_components.span, {\\n                className: \\\"token assign-left variable\\\",\\n                children: \\\"memory.limit_in_bytes\\\"\\n              }), _jsx(_components.span, {\\n                className: \\\"token operator\\\",\\n                children: \\\"=\\\"\\n              }), _jsx(_components.span, {\\n                className: \\\"token number\\\",\\n                children: \\\"209715200\\\"\\n              }), \\\" mygroup\\\\n\\\"]\\n            })\\n          })\\n        }), \\\"\\\\n\\\"]\\n      }), \\\"\\\\n\\\", _jsxs(_components.li, {\\n        children: [\\\"\\\\n\\\", _jsxs(_components.p, {\\n          children: [_jsx(_components.strong, {\\n            children: \\\"将进程添加到 cgroup\\\"\\n          }), \\\":\\\\n使用 \\\", _jsx(_components.code, {\\n            children: \\\"cgclassify\\\"\\n          }), \\\" 命令将进程添加到 cgroup。例如，将进程 ID 为 1234 的进程添加到 \\\", _jsx(_components.code, {\\n            children: \\\"mygroup\\\"\\n          }), \\\"，可以使用以下命令：\\\"]\\n        }), \\\"\\\\n\\\", _jsx(_components.pre, {\\n          className: \\\"language-bash\\\",\\n          children: _jsx(_components.code, {\\n            className: \\\"language-bash code-highlight\\\",\\n            children: _jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [_jsx(_components.span, {\\n                className: \\\"token function\\\",\\n                children: \\\"sudo\\\"\\n              }), \\\" cgclassify \\\", _jsx(_components.span, {\\n                className: \\\"token parameter variable\\\",\\n                children: \\\"-g\\\"\\n              }), \\\" memory:mygroup \\\", _jsx(_components.span, {\\n                className: \\\"token number\\\",\\n                children: \\\"1234\\\"\\n              }), \\\"\\\\n\\\"]\\n            })\\n          })\\n        }), \\\"\\\\n\\\"]\\n      }), \\\"\\\\n\\\"]\\n    }), \\\"\\\\n\\\", _jsx(_components.p, {\\n      children: \\\"这样，进程 ID 为 1234 的进程及其子进程将被限制在最多使用 200MB 的内存。\\\"\\n    }), \\\"\\\\n\\\", _jsx(_components.p, {\\n      children: \\\"注意：这些命令可能需要 root 权限来执行。此外，确保你的系统安装了 cgroup 工具，这些工具可能在某些 Linux 发行版中不是默认安装的。\\\"\\n    }), \\\"\\\\n\\\", _jsx(_components.p, {\\n      children: \\\"通过这些步骤，你可以有效地控制 Linux 系统上进程组的内存使用，有助于防止单个进程消耗过多的内存资源，从而影响系统的整体稳定性和性能。\\\"\\n    }), \\\"\\\\n\\\", _jsx(_components.p, {\\n      children: \\\"要通过 Linux 的 cgroup 特性限制 Docker 所有容器的最大内存使用，你可以利用 Docker 自身的内存限制功能，这实际上是基于 cgroup 实现的。Docker 允许你在容器级别设置内存和 CPU 的限制。\\\"\\n    }), \\\"\\\\n\\\", _jsx(_components.p, {\\n      children: \\\"以下是如何为 Docker 容器设置内存限制的基本步骤：\\\"\\n    }), \\\"\\\\n\\\", _jsxs(_components.ol, {\\n      children: [\\\"\\\\n\\\", _jsxs(_components.li, {\\n        children: [\\\"\\\\n\\\", _jsxs(_components.p, {\\n          children: [_jsx(_components.strong, {\\n            children: \\\"创建或更新 Docker 容器时设置内存限制\\\"\\n          }), \\\"：\\\\n使用 \\\", _jsx(_components.code, {\\n            children: \\\"docker run\\\"\\n          }), \\\" 命令创建容器时，可以使用 \\\", _jsx(_components.code, {\\n            children: \\\"--memory\\\"\\n          }), \\\" 或 \\\", _jsx(_components.code, {\\n            children: \\\"-m\\\"\\n          }), \\\" 选项来设置内存限制。例如，要创建一个内存限制为 500MB 的容器，可以运行：\\\"]\\n        }), \\\"\\\\n\\\", _jsx(_components.pre, {\\n          className: \\\"language-bash\\\",\\n          children: _jsx(_components.code, {\\n            className: \\\"language-bash code-highlight\\\",\\n            children: _jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [_jsx(_components.span, {\\n                className: \\\"token function\\\",\\n                children: \\\"docker\\\"\\n              }), \\\" run \\\", _jsx(_components.span, {\\n                className: \\\"token parameter variable\\\",\\n                children: \\\"-m\\\"\\n              }), \\\" 500m \\\", _jsx(_components.span, {\\n                className: \\\"token parameter variable\\\",\\n                children: \\\"--name\\\"\\n              }), \\\" my_container my_image\\\\n\\\"]\\n            })\\n          })\\n        }), \\\"\\\\n\\\", _jsxs(_components.p, {\\n          children: [\\\"如果你想要更新一个已经存在的容器的内存限制，可以使用 \\\", _jsx(_components.code, {\\n            children: \\\"docker update\\\"\\n          }), \\\" 命令：\\\"]\\n        }), \\\"\\\\n\\\", _jsx(_components.pre, {\\n          className: \\\"language-bash\\\",\\n          children: _jsx(_components.code, {\\n            className: \\\"language-bash code-highlight\\\",\\n            children: _jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [_jsx(_components.span, {\\n                className: \\\"token function\\\",\\n                children: \\\"docker\\\"\\n              }), \\\" update \\\", _jsx(_components.span, {\\n                className: \\\"token parameter variable\\\",\\n                children: \\\"--memory\\\"\\n              }), \\\" 500m --memory-swap \\\", _jsx(_components.span, {\\n                className: \\\"token parameter variable\\\",\\n                children: \\\"-1\\\"\\n              }), \\\" my_container\\\\n\\\"]\\n            })\\n          })\\n        }), \\\"\\\\n\\\", _jsxs(_components.p, {\\n          children: [\\\"这里 \\\", _jsx(_components.code, {\\n            children: \\\"--memory-swap\\\"\\n          }), \\\" 设置为 \\\", _jsx(_components.code, {\\n            children: \\\"-1\\\"\\n          }), \\\" 表示不限制 swap 空间的使用，如果你想要限制 swap 空间，可以将其设置为一个具体的值，比如 \\\", _jsx(_components.code, {\\n            children: \\\"--memory-swap 1g\\\"\\n          }), \\\"。\\\"]\\n        }), \\\"\\\\n\\\"]\\n      }), \\\"\\\\n\\\", _jsxs(_components.li, {\\n        children: [\\\"\\\\n\\\", _jsxs(_components.p, {\\n          children: [_jsx(_components.strong, {\\n            children: \\\"为 Docker 守护进程设置默认内存限制\\\"\\n          }), \\\"：\\\\n你也可以在 Docker 守护进程的配置文件 \\\", _jsx(_components.code, {\\n            children: \\\"/etc/docker/daemon.json\\\"\\n          }), \\\" 中设置默认的内存和 swap 限制，这样所有新创建的容器都会继承这些限制，除非在创建时明确指定了其他值。例如：\\\"]\\n        }), \\\"\\\\n\\\", _jsx(_components.pre, {\\n          className: \\\"language-json\\\",\\n          children: _jsxs(_components.code, {\\n            className: \\\"language-json code-highlight\\\",\\n            children: [_jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [_jsx(_components.span, {\\n                className: \\\"token punctuation\\\",\\n                children: \\\"{\\\"\\n              }), \\\"\\\\n\\\"]\\n            }), _jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [\\\"  \\\", _jsx(_components.span, {\\n                className: \\\"token property\\\",\\n                children: \\\"\\\\\\\"default-ulimits\\\\\\\"\\\"\\n              }), _jsx(_components.span, {\\n                className: \\\"token operator\\\",\\n                children: \\\":\\\"\\n              }), \\\" \\\", _jsx(_components.span, {\\n                className: \\\"token punctuation\\\",\\n                children: \\\"{\\\"\\n              }), \\\"\\\\n\\\"]\\n            }), _jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [\\\"    \\\", _jsx(_components.span, {\\n                className: \\\"token property\\\",\\n                children: \\\"\\\\\\\"nofile\\\\\\\"\\\"\\n              }), _jsx(_components.span, {\\n                className: \\\"token operator\\\",\\n                children: \\\":\\\"\\n              }), \\\" \\\", _jsx(_components.span, {\\n                className: \\\"token punctuation\\\",\\n                children: \\\"{\\\"\\n              }), \\\"\\\\n\\\"]\\n            }), _jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [\\\"      \\\", _jsx(_components.span, {\\n                className: \\\"token property\\\",\\n                children: \\\"\\\\\\\"name\\\\\\\"\\\"\\n              }), _jsx(_components.span, {\\n                className: \\\"token operator\\\",\\n                children: \\\":\\\"\\n              }), \\\" \\\", _jsx(_components.span, {\\n                className: \\\"token string\\\",\\n                children: \\\"\\\\\\\"nofile\\\\\\\"\\\"\\n              }), _jsx(_components.span, {\\n                className: \\\"token punctuation\\\",\\n                children: \\\",\\\"\\n              }), \\\"\\\\n\\\"]\\n            }), _jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [\\\"      \\\", _jsx(_components.span, {\\n                className: \\\"token property\\\",\\n                children: \\\"\\\\\\\"hard\\\\\\\"\\\"\\n              }), _jsx(_components.span, {\\n                className: \\\"token operator\\\",\\n                children: \\\":\\\"\\n              }), \\\" \\\", _jsx(_components.span, {\\n                className: \\\"token number\\\",\\n                children: \\\"64000\\\"\\n              }), _jsx(_components.span, {\\n                className: \\\"token punctuation\\\",\\n                children: \\\",\\\"\\n              }), \\\"\\\\n\\\"]\\n            }), _jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [\\\"      \\\", _jsx(_components.span, {\\n                className: \\\"token property\\\",\\n                children: \\\"\\\\\\\"soft\\\\\\\"\\\"\\n              }), _jsx(_components.span, {\\n                className: \\\"token operator\\\",\\n                children: \\\":\\\"\\n              }), \\\" \\\", _jsx(_components.span, {\\n                className: \\\"token number\\\",\\n                children: \\\"64000\\\"\\n              }), \\\"\\\\n\\\"]\\n            }), _jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [\\\"    \\\", _jsx(_components.span, {\\n                className: \\\"token punctuation\\\",\\n                children: \\\"}\\\"\\n              }), \\\"\\\\n\\\"]\\n            }), _jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [\\\"  \\\", _jsx(_components.span, {\\n                className: \\\"token punctuation\\\",\\n                children: \\\"}\\\"\\n              }), _jsx(_components.span, {\\n                className: \\\"token punctuation\\\",\\n                children: \\\",\\\"\\n              }), \\\"\\\\n\\\"]\\n            }), _jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [\\\"  \\\", _jsx(_components.span, {\\n                className: \\\"token property\\\",\\n                children: \\\"\\\\\\\"default-memory-limit\\\\\\\"\\\"\\n              }), _jsx(_components.span, {\\n                className: \\\"token operator\\\",\\n                children: \\\":\\\"\\n              }), \\\" \\\", _jsx(_components.span, {\\n                className: \\\"token string\\\",\\n                children: \\\"\\\\\\\"500m\\\\\\\"\\\"\\n              }), _jsx(_components.span, {\\n                className: \\\"token punctuation\\\",\\n                children: \\\",\\\"\\n              }), \\\"\\\\n\\\"]\\n            }), _jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [\\\"  \\\", _jsx(_components.span, {\\n                className: \\\"token property\\\",\\n                children: \\\"\\\\\\\"default-memory-swap\\\\\\\"\\\"\\n              }), _jsx(_components.span, {\\n                className: \\\"token operator\\\",\\n                children: \\\":\\\"\\n              }), \\\" \\\", _jsx(_components.span, {\\n                className: \\\"token string\\\",\\n                children: \\\"\\\\\\\"-1\\\\\\\"\\\"\\n              }), \\\"\\\\n\\\"]\\n            }), _jsxs(_components.span, {\\n              className: \\\"code-line\\\",\\n              children: [_jsx(_components.span, {\\n                className: \\\"token punctuation\\\",\\n                children: \\\"}\\\"\\n              }), \\\"\\\\n\\\"]\\n            })]\\n          })\\n        }), \\\"\\\\n\\\", _jsx(_components.p, {\\n          children: \\\"修改配置文件后，需要重启 Docker 守护进程来使更改生效。\\\"\\n        }), \\\"\\\\n\\\"]\\n      }), \\\"\\\\n\\\", _jsxs(_components.li, {\\n        children: [\\\"\\\\n\\\", _jsxs(_components.p, {\\n          children: [_jsx(_components.strong, {\\n            children: \\\"验证内存限制\\\"\\n          }), \\\"：\\\\n你可以使用 \\\", _jsx(_components.code, {\\n            children: \\\"docker stats\\\"\\n          }), \\\" 命令来查看容器的内存使用情况，以验证内存限制是否生效。\\\"]\\n        }), \\\"\\\\n\\\"]\\n      }), \\\"\\\\n\\\"]\\n    }), \\\"\\\\n\\\", _jsx(_components.p, {\\n      children: \\\"通过这些步骤，你可以有效地控制 Docker 容器在 Linux 系统上的内存使用，防止单个容器消耗过多的内存资源。\\\"\\n    })]\\n  });\\n}\\nfunction MDXContent(props = {}) {\\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\\n    children: _jsx(_createMdxContent, props)\\n  })) : _createMdxContent(props);\\n}\\nreturn {\\n  default: MDXContent\\n};\\n\",\"frontmatter\":{},\"scope\":{\"title\":\"Linux系统中的cgroups的了解与应用\",\"icon\":\"pen-to-square\",\"date\":\"2024-09-12T00:00:00.000Z\",\"category\":[\"Linux\"],\"tag\":[\"Linux\",\"docker\",\"cgroups\"]}}","meta":{"title":"Linux系统中的cgroups的了解与应用","icon":"pen-to-square","date":"2024-09-12T00:00:00.000Z","category":["Linux"],"tag":["Linux","docker","cgroups"],"tags":[],"tasks":[],"authors":[],"description":"title: Linux系统中的cgroups的了解与应用\nicon: pen-to-square\ndate: 2024-09-12\ncategory:\n\nLinux 的 cgroup（控制组）特性是一种强大的工具，它允许你限制、记录和隔离进程组所使用的物理资源（包括 CPU、内存、磁盘 I/O 等）。如果你想限制一个进程或一组进程的最大内存使用量，你可以使用 cgroup 的内存限制功能。\n\n以...","layout":"docs","slug":"Linux系统中的cgroups的了解与应用","urlPath":"编程相关/Linux系统中的cgroups的了解与应用","isDraft":false,"editUrl":"https://github.com/SunshineAI0523/SunshineNotes/edit/main/content/编程相关/Linux系统中的cgroups的了解与应用.md","showComments":false,"showEditLink":true,"showLinkPreviews":true,"showToc":true,"showSidebar":true},"siteMap":[{"name":"旅行日记","path":"旅行日记","level":0,"children":[{"name":"《訪れてみたい日本のアニメ聖地88 (2024年版)』一覧》北海道・東北地方","href":"%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0/%E6%97%A5%E6%BC%AB%E5%9C%A3%E5%9C%B0%E5%B7%A1%E7%A4%BC01"},{"name":"《訪れてみたい日本のアニメ聖地88 (2024年版)』一覧》其他地方","href":"%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0/%E6%97%A5%E6%BC%AB%E5%9C%A3%E5%9C%B0%E5%B7%A1%E7%A4%BC06"},{"name":"《訪れてみたい日本のアニメ聖地88 (2024年版)』一覧》関東地方①","href":"%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0/%E6%97%A5%E6%BC%AB%E5%9C%A3%E5%9C%B0%E5%B7%A1%E7%A4%BC02"},{"name":"《訪れてみたい日本のアニメ聖地88 (2024年版)』一覧》中部地方","href":"%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0/%E6%97%A5%E6%BC%AB%E5%9C%A3%E5%9C%B0%E5%B7%A1%E7%A4%BC05"},{"name":"《訪れてみたい日本のアニメ聖地88 (2024年版)』一覧》関東地方②","href":"%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0/%E6%97%A5%E6%BC%AB%E5%9C%A3%E5%9C%B0%E5%B7%A1%E7%A4%BC03"},{"name":"《訪れてみたい日本のアニメ聖地88 (2024年版)』一覧》関東地方③","href":"%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0/%E6%97%A5%E6%BC%AB%E5%9C%A3%E5%9C%B0%E5%B7%A1%E7%A4%BC04"}]},{"name":"建站杂记","path":"建站杂记","level":0,"children":[{"name":"面试问题参考回答(电信行业)","href":"%E5%BB%BA%E7%AB%99%E6%9D%82%E8%AE%B0/%E7%94%B5%E4%BF%A1%E8%A1%8C%E4%B8%9A%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%8F%82%E8%80%83%E5%9B%9E%E7%AD%94"},{"name":"如何获取优质蜂蜜","href":"%E5%BB%BA%E7%AB%99%E6%9D%82%E8%AE%B0/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E4%BC%98%E8%B4%A8%E8%9C%82%E8%9C%9C"},{"name":"面试常见问题解答(2)","href":"%E5%BB%BA%E7%AB%99%E6%9D%82%E8%AE%B0/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94(2)"},{"name":"(计算机)运维应届生面试问题准备","href":"%E5%BB%BA%E7%AB%99%E6%9D%82%E8%AE%B0/%E8%BF%90%E7%BB%B4%E5%BA%94%E5%B1%8A%E7%94%9F%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%87%86%E5%A4%87"},{"name":"面试常见问题标准解答示例","href":"%E5%BB%BA%E7%AB%99%E6%9D%82%E8%AE%B0/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%A0%87%E5%87%86%E8%A7%A3%E7%AD%94%E7%A4%BA%E4%BE%8B"},{"name":"如何制作蜂蜜柠檬茶","href":"%E5%BB%BA%E7%AB%99%E6%9D%82%E8%AE%B0/%E5%A6%82%E4%BD%95%E5%88%B6%E4%BD%9C%E8%9C%82%E8%9C%9C%E6%9F%A0%E6%AA%AC%E8%8C%B6"},{"name":"面试问题准备(电信行业)","href":"%E5%BB%BA%E7%AB%99%E6%9D%82%E8%AE%B0/%E7%94%B5%E4%BF%A1%E8%A1%8C%E4%B8%9A%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E5%87%86%E5%A4%87"},{"name":"如何种一棵柠檬树","href":"%E5%BB%BA%E7%AB%99%E6%9D%82%E8%AE%B0/%E5%A6%82%E4%BD%95%E7%A7%8D%E4%B8%80%E6%A3%B5%E6%9F%A0%E6%AA%AC%E6%A0%91"},{"name":"面试常见问题解答(3)","href":"%E5%BB%BA%E7%AB%99%E6%9D%82%E8%AE%B0/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94(3)"},{"name":"【小白必看】零基础教程：一键加速，让你的Windows机械硬盘传输速度飞起来！","href":"%E5%BB%BA%E7%AB%99%E6%9D%82%E8%AE%B0/%E4%B8%80%E9%94%AE%E5%8A%A0%E9%80%9F%EF%BC%8C%E8%AE%A9%E4%BD%A0%E7%9A%84Windows%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E4%BC%A0%E8%BE%93%E9%80%9F%E5%BA%A6%E9%A3%9E%E8%B5%B7%E6%9D%A5!"},{"name":"面试常见问题解答(1)","href":"%E5%BB%BA%E7%AB%99%E6%9D%82%E8%AE%B0/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94(1)"}]},{"name":"旅行日记","href":"%E6%97%85%E8%A1%8C%E6%97%A5%E8%AE%B0"},{"name":"朝阳笔记","href":"%E6%9C%9D%E9%98%B3%E7%AC%94%E8%AE%B0"},{"name":"编程相关","path":"编程相关","level":0,"children":[{"name":"GitSubmodule自动跟随主分支","href":"%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/GitSubmodule%E8%87%AA%E5%8A%A8%E8%B7%9F%E9%9A%8F%E4%B8%BB%E5%88%86%E6%94%AF"},{"name":"Linux系统中的cgroups的了解与应用","href":"%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84cgroups%E7%9A%84%E4%BA%86%E8%A7%A3%E4%B8%8E%E5%BA%94%E7%94%A8"},{"name":"Vue2脚手架快速搭建","href":"%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/Vue2%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA"}]},{"name":"各种折腾","href":"%E5%90%84%E7%A7%8D%E6%8A%98%E8%85%BE"},{"name":"建站杂记","href":"%E5%BB%BA%E7%AB%99%E6%9D%82%E8%AE%B0"},{"name":"编程相关","href":"%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3"},{"name":"B站小漫画合集","href":"B%E7%AB%99%E5%B0%8F%E6%BC%AB%E7%94%BB%E5%90%88%E9%9B%86"}]},"__N_SSG":true}